/**
 * @file drone.h
 */
#ifndef DRONE_H_
#define DRONE_H_
/*******************************************************************************
 * Includes
 ******************************************************************************/
#include "deliveryobjects.h"
#include "delivery_paths.h"



namespace csci3081 {
	class iDeliveryPaths;
/*******************************************************************************
 * Class Definitions
 ******************************************************************************/
	/**
	 * @brief This class contains everything that sets the drone apart from the robot. 
	 *
	 * On top of using a different \ref UpdatePosition function that uses Vector3D, it also contains additional functionality needed for the 
	 * strategy pattern used in generating paths. It needs addtional functionality because a drone can use all three types of paths generated by the strategy pattern.
	 */
	class Drone : public csci3081::DeliveryObject {
	// TODO: Add documentation to these functions
		public:
		/**
		 * @brief This is the constructor for the drone class. It takes in 2 float vectors, a predefined speed, a predefined radius, and a picojson object
		 *
		 * This is the general constructor for the Drones. It initializes all of the drones attributes using the
		 * input parameters. The first parameter is the drones position vector, the second is the drones direction
		 * vector, the following three are additional attributes, and the last is the drone picojson object itself.
		 *
		 *
		 * @param[in] pos Position vector for the drone.
		 * @param[in] direction Direction vector for the drone.
		 * @param[in] speed speed of the drone.
		 * @param[in] radius radius of the drone.
		 * @param[in] picojson The drone's picojson object.
		 *
		 */
		Drone(std::vector<float> pos, std::vector<float> direction, double speed, double radius, const picojson::object& obj);

		/**
		 * @brief This is the Destructor for a Drone object
		 */
		~Drone();

		/**
		 * @brief This function is used to determine which update function the drone should use
		 *
		 * Depending on the path variable, set at construction, the Drone will update its position in
		 * three different ways: beeline, smartpath, or parabolic.
		 *
		 * @param[in] dt the amount of time passed between each update call
		 */
		void UpdatePosition(float dt);

		/**
		 * @brief This function will set a package for the object object
		 *
		 * @param[in] package The package that the object will carry.
		 */
		void SetPackage();

		/**
		 * @brief This determines, using the strategy pattern, what path algorithm to use
		 * 
		 * @param[in] path Determines what path to use 
		 * 
		 * Based on what gets passed in the drone object will use that specific path algorithm
		 */
		void SetPath(std::string path);

		/**
		 * @brief Add a Package to the packages vector
		 * 
		 * @param[in] newPackage The new package to be added to the package vector
		 */
		void AddPackage(Package* newPackage);

		/**
		 * @brief This function will set the drone's next path vector to follow to be the one to the customer
		 * 
		 * This function is used to switch from picking up packages to now dropping them off. This will be called
		 * when a drone has picked up it's max weight capacity or all possible packages available. It will also be called 
		 * after a package has been dropped off to see if it needs to drop off more packages or go back to picking them up.
		 *
		 */
		void GoToCustomerPath();

		private:
			std::vector<float> destination;
			std::string path = "default";
			iDeliveryPaths* StrategyPath;
		};

}
#endif
